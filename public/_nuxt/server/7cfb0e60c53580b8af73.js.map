{"version":3,"file":"7cfb0e60c53580b8af73.js","sources":["webpack:///./src/pages/marketplace/cart/checkout.vue"],"sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport OptionButtons from '@/components/OptionButtons'\nimport VueTailwindModal from '@/components/VueTailwindModal'\nimport { mapGetters } from 'vuex'\nimport { validate } from 'vee-validate'\n\nexport default {\n  layout: 'marketplace',\n  components: {\n    OptionButtons,\n    VueTailwindModal\n  },\n  created() {\n    if(!this.$storage.getLocalStorage('products_to_checkout')) return this.$router.replace('/marketplace/cart')\n    this.products = this.$storage.getLocalStorage('products_to_checkout')\n    this.deliveryOption = _.first(this.deliveryOptions).value\n  },\n  data() {\n    return {\n      isLoading: false,\n      isLoading: false,\n      selectingAddressFor: null,\n      userAddresses: [],\n      shippingAddressError: null,\n      billingAddressError: null,\n      addressLabels: [\n        {\n          label: 'Home',\n          value: 'Home'\n        },\n        {\n          label: 'Office',\n          value: 'Office'\n        }\n      ],\n      provinces: [],\n      cities: [],\n      barangays: [],\n      isAddressModalLoading: false,\n      voucherCode: null,\n      deliveryOption: null,\n      shippingAddress: null,\n      billingAddress: null,\n      contactNumber: null,\n      contactEmail: null,\n      addressFormData: {\n        id: null,\n        fullname: null,\n        house_number: null,\n        province: null,\n        city: null,\n        barangay: null,\n        mobile_number: null,\n        notes: null,\n        label: null,\n        is_default: false\n      },\n      deliveryOptions: [\n        {\n          label: 'Standard Delivery',\n          value: 'standard',\n          meta: {\n            cost: 45,\n            est: 'Feb. 5 - Feb. 10'\n          }\n        },\n        {\n          label: 'Express Delivery',\n          value: 'express',\n          meta: {\n            cost: 105,\n            est: 'Feb. 5 - Feb. 10'\n          }\n        }\n      ]\n    }\n  },\n  computed: {\n    ...mapGetters({\n      user: 'user/user'\n    }),\n    subtotal() {\n      return _.sum(\n        _.map(this.products, ({ quantity, price }) => quantity * price)\n      )\n    },\n    total() {\n      if (!this.deliveryOption) return this.subtotal\n      return this.subtotal + this.deliveryOptionValue\n    },\n    deliveryOptionValue() {\n      const option = _.find(this.deliveryOptions, { value: this.deliveryOption })\n      if(!option) return 0\n      return option.meta.cost\n    }\n  },\n  methods: {\n    async confirmOrder() {\n      this.billingAddressError = null\n      this.shippingAddressError = null\n      if (!this.billingAddress)\n        this.billingAddressError = 'Billing address is required.'\n      if (!this.shippingAddress)\n        this.shippingAddressError = 'Shipping address is required.'\n      let validationResponse = await this.$validator.validateAll()\n      if (\n        !validationResponse ||\n        this.billingAddressError ||\n        this.shippingAddressError ||\n        this.isLoading\n      )\n        return\n      this.isLoading = true\n\n      const order = await this.$store.dispatch('marketplace/confirmOrderFor', {\n        user: this.user,\n        products: _.map(this.products, ({id, quantity}) => ({id, quantity})),\n        contact: {\n          shipping_address: this.shippingAddress,\n          billing_address: this.billingAddress,\n          contact_number: this.contactNumber,\n          contact_email: this.contactEmail\n        },\n        total: this.total\n      })\n      this.$storage.setLocalStorage('order_id', order.id)\n      this.$storage.removeLocalStorage('products_to_checkout')\n      this.$router.replace('/marketplace/cart/payment')\n    },\n    selectAddress(address) {\n      switch (this.selectingAddressFor) {\n        case 'shipping':\n          this.shippingAddress = address\n          break\n        case 'billing':\n          this.billingAddress = address\n          break\n      }\n      this.$refs.addressSelectionModal.hide()\n    },\n    selectAddressFor(address) {\n      this.selectingAddressFor = address\n      this.showAddressSelectionModal()\n    },\n    async editAddress(address) {\n      this.addressFormData = address\n      this.$refs.addressSelectionModal.hide()\n      this.$refs.addressFormModal.show()\n      this.isAddressModalLoading = true\n      await this.getPHAddresses()\n      this.isAddressModalLoading = false\n    },\n    async saveAddress() {\n      let validationResponse = await this.$validator.validateAll('addressForm')\n      if (!validationResponse || this.isAddressModalLoading) return\n      this.isAddressModalLoading = true\n      const address = await this.$store.dispatch('marketplace/saveAddress', {\n        ...this.addressFormData,\n        user_id: this.user.uid\n      })\n      this.$validator.reset()\n      this.$refs.addressFormModal.hide()\n      this.$refs.addressSelectionModal.show()\n      this.$nextTick(() => {\n        this.userAddresses = [...this.userAddresses, address]\n        this.addressFormData = {\n          fullname: null,\n          house_number: null,\n          province: null,\n          city: null,\n          postcode: null,\n          mobile_number: null,\n          notes: null,\n          label: null,\n          is_default: false\n        }\n      })\n      this.isAddressModalLoading = false\n    },\n    async showAddressSelectionModal() {\n      this.isAddressModalLoading = true\n      this.$refs.addressSelectionModal.show()\n      this.userAddresses = await this.$store.dispatch(\n        'marketplace/getAddressesOf',\n        this.user.uid\n      )\n      this.isAddressModalLoading = false\n    },\n    async getPHAddresses() {\n      const { provinces, cities, barangays } = await this.$store.dispatch(\n        'marketplace/getPHAddresses',\n        {\n          province: this.addressFormData.province\n            ? this.addressFormData.province.provCode\n            : '',\n          city: this.addressFormData.city\n            ? this.addressFormData.city.citymunCode\n            : '',\n          barangay: this.addressFormData.barangay\n            ? this.addressFormData.barangay.brgyCode\n            : ''\n        }\n      )\n      this.provinces = provinces\n      this.cities = cities\n      this.barangays = barangays\n    },\n    async showAddressFormModal() {\n      this.$refs.addressSelectionModal.hide()\n      this.$refs.addressFormModal.show()\n      this.isAddressModalLoading = true\n      await this.getPHAddresses()\n      this.isAddressModalLoading = false\n    },\n    hideAddressFormModal() {\n      this.$validator.reset()\n      this.$refs.addressFormModal.hide()\n      this.$refs.addressSelectionModal.show()\n      this.$nextTick(() => {\n        this.addressFormData = {\n          fullname: null,\n          house_number: null,\n          province: null,\n          city: null,\n          postcode: null,\n          mobile_number: null,\n          notes: null,\n          label: null,\n          is_default: false\n        }\n      })\n    }\n  }\n}\n"],"mappings":"AAAA","sourceRoot":""}