{"version":3,"file":"78929343d99d9efb24aa.js","sources":["webpack:///./src/pages/collection/designer/index.vue"],"sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { fireDb } from '~/plugins/firebase'\nimport Tabs from '@/components/Tabs'\nimport Select from '@/components/Select'\nimport ToggleSwitch from '@/components/ToggleSwitch'\nimport ColorRegulator from '~/plugins/color-regulator.js'\nimport { mapGetters } from 'vuex'\nimport AvailableProducts from '@/components/Designer/AvailableProducts'\nimport VueTailwindDrawer from '@/components/VueTailwindDrawer'\nimport VueTailwindAccordion from '@/components/VueTailwindAccordion'\nimport WrappedEditor from '@/components/WrappedEditor'\nimport DesignerTabs from '@/components/Designer/DesignerTabs'\nimport draggable from 'vuedraggable'\nimport Konva from '@/components/Designer/Canvas/Konva'\nimport { Canvas, Output } from '@/components/Designer/Canvas/Default/index.js'\n\nlet WebFontLoader = null\nif (process.client) {\n  WebFontLoader = require('webfontloader')\n}\n\nexport default {\n  layout: 'designer',\n  components: {\n    Tabs,\n    Select,\n    ToggleSwitch,\n    AvailableProducts,\n    WrappedEditor,\n    VueTailwindDrawer,\n    VueTailwindAccordion,\n    draggable,\n    DesignerTabs,\n    Konva,\n    Canvas,\n    Output\n  },\n  async created() {\n    WebFontLoader.load({\n      google: {\n        families: _.map(this.webfonts, 'value')\n      }\n    })\n    this.currentProduct = JSON.parse(JSON.stringify(this.selectedProducts[0]))\n    this.currentVariant = this.currentProduct.variants[0]\n    this.isLoading = false\n  },\n  data() {\n    return {\n      selectedTab: 'preview',\n      isLayersCollapsed: false,\n      productDescriptionEditor: null,\n      fontSizeTimeout: null,\n      isLoading: false,\n      tmpProducts: [],\n      isPrintableAreaHovered: false,\n      selectedFont: null,\n      currentProduct: null,\n      currentVariant: null,\n      isMoving: false,\n      highlightRuler: {\n        vertical: false,\n        horizontal: false\n      },\n      printableAreaZ: 2,\n      tmpProductMetadata: {\n        name: '',\n        description: '',\n        tags: ''\n      }\n    }\n  },\n  computed: {\n    ...mapGetters({\n      webfonts: 'designer/webfonts',\n      selectedProducts: 'designer/selectedProducts',\n      currentProductIndex: 'designer/currentProductIndex',\n      currentVariantIndex: 'designer/currentVariantIndex',\n      currentSide: 'designer/currentSide',\n      currentDesignId: 'designer/currentDesignId',\n      designMeta: 'designer/designMeta'\n    }),\n    currentVariantSides() {\n      return _.map(this.currentVariant.printable_area, (area, key) => ({\n        label: area.placeholder,\n        value: key\n      }))\n    }\n  },\n  methods: {\n    _reverseObjects(objects) {\n      return JSON.parse(JSON.stringify(objects)).reverse()\n    },\n    startEditingMetadata() {\n      this.toggleDrawer('productMetaDrawer')\n      this.tmpProductMetadata = JSON.parse(\n        JSON.stringify(this.selectedProducts[this.currentProductIndex].meta)\n      )\n    },\n    _reverseObjects(objects) {\n      return JSON.parse(JSON.stringify(objects)).reverse()\n    },\n    layerDragged(e) {\n      this.$store.commit(\n        'designer/CURRENT_VARIANT_PROPERTIES',\n        this.currentVariant.printable_area[this.currentSide].objects\n      )\n      this.$nextTick(() => {\n        this.activated(\n          this.currentVariant.printable_area[this.currentSide].objects[\n            e.newIndex\n          ]\n        )\n      })\n    },\n    rightDrawerHidden() {\n      this.$nextTick(() => {\n        this.tmpProductMetadata = {\n          name: '',\n          description: '',\n          tags: ''\n        }\n      })\n    },\n    async saveProductMetadata() {\n      let res = await this.$validator.validate()\n      if (!res) return\n      this.$store.commit(\n        'designer/CURRENT_PRODUCT_META',\n        this.tmpProductMetadata\n      )\n      this.$refs.productMetaDrawer.hide()\n    },\n    toggleDrawer(drawer) {\n      if (this.$refs[drawer].isShown) {\n        this.$refs[drawer].hide()\n        return\n      }\n      this.$refs[drawer].show()\n    },\n    changeCurrentProductPlan({ value }) {\n      let plan = 'buy'\n      if (value) plan = 'sell'\n      this.$store.commit('designer/DESIGN_PLAN', plan)\n    },\n    togglePlanSection() {\n      this.isMarketPlanCollapsed = !this.isMarketPlanCollapsed\n      this.$storage.setLocalStorage(\n        'is_plan_collapsed',\n        this.isMarketPlanCollapsed\n      )\n    },\n    _firstPrintableArea(variant) {\n      let areas = _.keys(variant.printable_area)\n      return _.includes(areas, 'front') ? 'front' : _.head(areas)\n    },\n    manageProducts() {\n      let selectedProductIds = _.map(this.selectedProducts, 'id')\n      this.tmpProducts = _.map(this.tmpProducts, product => {\n        if (!product.parent_id){\n          const ref = fireDb.collection('user_products').doc()\n          product.parent_id = product.id\n          product.id = ref.id\n          product.is_new = true\n        }\n        if (!product.meta)\n          product.meta = {\n            name: '',\n            description: '',\n            tags: '',\n            printing_option: ''\n          }\n        return product\n      })\n      this.$store.dispatch('designer/setSelectedProducts', [\n        ...this.selectedProducts,\n        ...this.tmpProducts\n      ])\n      let productIndex = this.currentProductIndex\n      if (!this.selectedProducts[productIndex]) productIndex = 0\n      this.currentProduct = JSON.parse(\n        JSON.stringify(this.selectedProducts[productIndex])\n      )\n      this.currentVariant = this.currentProduct.variants[0]\n      this.tmpProducts = []\n      this.$refs.availableProductsModal.hide()\n    },\n    showAvailableProducts() {\n      this.$refs.availableProductsModal.show()\n    },\n    hideAvailableProducts() {\n      this.$refs.availableProductsModal.hide()\n    },\n    async addVariant(variant) {\n      if (\n        _.find(this.currentProduct.variants, { color: variant.color }) &&\n        this.currentProduct.variants.length == 1\n      )\n        return\n      if (_.find(this.currentProduct.variants, { color: variant.color })) {\n        let variantIndex = await this.$store.dispatch(\n          'designer/removeVariant',\n          variant\n        )\n        this.currentProduct.variants.splice(variantIndex, 1)\n        this.selectVariant(\n          variantIndex ? variantIndex - 1 : variantIndex,\n          this.currentProductIndex\n        )\n        return\n      }\n      let newVariant = await this.$store.dispatch(\n        'designer/addVariant',\n        {\n          ...variant,\n          ...{\n            id: null,\n            parent_id: variant.id\n          }\n        }\n      )\n      this.currentProduct.variants.push(JSON.parse(JSON.stringify(newVariant)))\n      this.selectVariant(\n        this.currentProduct.variants.length - 1,\n        this.currentProductIndex\n      )\n    },\n    _colorIsInVariantsOf(product, color) {\n      return _.find(\n        product.variants,\n        variant => variant.color.toLowerCase() == color.toLowerCase()\n      )\n    },\n    selectProduct(index) {\n      if (index == this.currentProductIndex) return\n      this.selectedTab = 'preview'\n      this.$store.commit('designer/CURRENT_PRODUCT_INDEX', index)\n      this.$store.commit('designer/CURRENT_VARIANT_INDEX', 0)\n    },\n    selectVariant(index, productIndex) {\n      if (productIndex != this.currentProductIndex) {\n        this.selectProduct(productIndex)\n        index = 0\n      }\n      this.$store.commit('designer/CURRENT_VARIANT_INDEX', index)\n    },\n    getCorrectColor(hex) {\n      return ColorRegulator.getContrastOf(hex)\n    }\n  },\n  watch: {\n    currentProduct: {\n      immediate: true,\n      handler(to) {\n        if (!to || (to && !to.meta)) return\n        this.tmpProductMetadata = JSON.parse(JSON.stringify(to.meta))\n      }\n    },\n    currentProductIndex: {\n      immediate: true,\n      handler(to) {\n        if (!this.selectedProducts.length) return\n        this.currentProduct = JSON.parse(\n          JSON.stringify(this.selectedProducts[to])\n        )\n        this.currentVariant = this.currentProduct.variants[0]\n        if (this.$refs.canvas) this.$refs.canvas.deactivated()\n      }\n    },\n    currentVariantIndex: {\n      immediate: true,\n      handler(to) {\n        if (!this.selectedProducts.length) return\n        this.currentVariant = JSON.parse(\n          JSON.stringify(\n            this.selectedProducts[this.currentProductIndex].variants[to]\n          )\n        )\n        if (this.$refs.canvas) this.$refs.canvas.deactivated()\n      }\n    },\n    selectedProducts: {\n      deep: true,\n      handler(to) {\n        clearTimeout(this.autoSaveTimeout)\n        this.autoSaveTimeout = setTimeout(async () => {\n          this.autoSaving = true\n          this.autoSavingText = 'Saving...'\n          await this.$store.dispatch('designer/saveData', {\n            shouldGenerateImages: false\n          })\n          this.autoSavingText = 'Saved!'\n          setTimeout(() => {\n            this.autoSaving = false\n          }, 1000)\n        }, 3000)\n      }\n    }\n  }\n}\n"],"mappings":"AAAA","sourceRoot":""}